@using CheckBoardGameVersion3.Data.Logic.Validate
@using CheckBoardGameVersion3.Data.Models
@using CheckBoardGameVersion3.Data.RepositoryBoard;
@inject IJSRuntime JSRuntime

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager


<div style="display:flex; align-items:center">
    <div class="blockChat">
        <div class="chat">
            <div id="messagesList">
                @foreach (var message in Messages)
                {
                    var userNameOpponent = message.Split(":");
                    if (userNameOpponent[0] != UserName)
                    {
                        <div style="float: left;text-align-last: left;" class="container">
                            <p>@message</p>
                        </div>
                    }
                    else
                    {
                        <div class="container">
                            <p>@message</p>
                        </div>
                    }
                }
            </div>
        </div>
        <div class="form-group">
            <label style="text-align:center">
                <input class="WriteMessage" @bind="MessageInput" size="50" />
            </label>
            <button class="buttonSend" @onclick="Send">Send</button>
        </div>
    </div>
    <div class="box" style="justify-content:space-around">
        <div style="text-align: center;color: #E0C6BD;">
            <h3 style="font-family: 'Belleza', sans-serif;margin-top: 40px;">CHECKERS</h3>
            <h4 style="margin-bottom: 54px;">@_boardInformation.CountBlack : @_boardInformation.CountWhite: </h4>
        </div>
        <div class="chessboard">
            <div class="row">
                <div class="SomeIndent3"></div>
                @for (var i = 0; i < 8; i++)
                {
                    <div class="indent3">@Markup.MarkupName[i]</div>
                }
                <div class="SomeIndent4"></div>

            </div>
            @for (var i = 0; i < 8; i++)
            {
                int local_I = i;
                var nameMarkup = Data.RepositoryBoard.Markup.MarkupName[local_I];

                <div class="row">
                    <div class="SomeIndent2"></div>
                    @for (var j = 0; j < 8; j++)
                    {
                        int local_J = j;
                        var numberMakup = Data.RepositoryBoard.Markup.MarkupNumber[local_J];

                        string idCell = nameMarkup + numberMakup;
                        var cell = _repositoryBoard.GetCell(idCell, Board);

                        bool CanMove = Board[idCell].CanMove;
                        bool canBeat = Board[idCell].CanAttack;
                        bool clickChecker = Board[idCell].ClickChecker;
                        bool lockChecker = Board[idCell].LockChecker;

                        <div @onclick="()=>Board =MoveAndBeatChecker( Board,cell)" class="cell @(CanMove ?"active":"") @(canBeat ? "beat":"")">

                            @if (cell.Checker != null)
                            {
                                <div @onclick="()=>Board =MoveAnalise(Board,cell)" class="checker @(cell.Checker.Color) @(clickChecker ?"active":"") @(lockChecker ?"lock":"") ">
                                    <div class="insideOfTheBox @(clickChecker ?"active":"") @(lockChecker ?"lock":"") "></div>
                                </div>
                            }
                        </div>
                    }
                    <div class="indent2">@Markup.MarkupNumber[i]</div>
                </div>
            }
            <div class="row">
                <div class="SomeIndent5"></div>
                @for (int i = 0; i < 8; i++)
                {
                    <div class="indent"></div>
                }
                <div class="SomeIndent"></div>
            </div>
        </div>
    </div>
    <div class="block">
        <div>NickName : @UserName</div>
        <div> Move : @TeamCheckers.PlayerMove </div>
        <div>Playing for : @TeamCheckers.Dask</div>
        <div>Amount black checkers : @_boardInformation.AmountBlackCheckers(Board) </div>
        <div>Amount white checkers : @_boardInformation.AmountWhiteCheckers(Board)</div>
        <div>Amount black Queen :@_boardInformation.AmountBlackQueenCheckers(Board)</div>
        <div>Amount white Queen :@_boardInformation.AmountWhiteQueenCheckers(Board)</div>
        <a href="#" class="myButton" @onclick="Delete">Delete game</a>
    </div>
</div>



@code {
    [Parameter] public SetTeam Dask { get; set; }
    [Parameter] public HubConnection? HubsConnection { get; set; }
    [Parameter] public string? TableId { get; set; }
    [Parameter] public string? UserName { get; set; }
    private string? MessageInput;
    private List<string> Messages = new List<string>();

    public async Task Send()
    {
        await HubsConnection.SendAsync("SendMessage", UserName, MessageInput, TableId);
    }
}


<PageTitle>Index</PageTitle>


