@using CheckBoardGameVersion3.Data.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager UrlManager
@page "/SelectChecker/{TableId}"

<div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="boxSelectChecker modal-content">
            <div style="font-family: 'Belleza', sans-serif;" class="modal-header">
                <h5 style="margin-left: auto; margin-right: auto;color: aliceblue;" class="modal-title" id="titleLabel">Select Checker</h5>
            </div>
            <div class="modal-body" style="align-self: center;display:flex;">
                <button style="margin-right: 60px;" class="checker White" @onclick="SetWhite" disabled="@LockWhite">
                    <div class="insideOfTheBox"></div>
                </button>
                <button style="margin-left: 60px;" class="checker Black " @onclick="SetBlack" disabled="@LockBlack">
                    <div class="insideOfTheBox"></div>
                </button>
            </div>
            <form>
                <div style="align-items: center;text-align: center;" class="form-group">
                    <label>
                        <input @bind="UserInput" required placeholder="Your name:" />

                    </label>
                </div>
                <div class="modal-body" style="align-self: center; text-align-last: center;">
                    <a  class="myButton " @onclick="StartGame">Play</a>
                </div>
            </form>
        </div>
    </div>
</div>

@code {

    [Parameter] public string TableId { get; set; }
    public static SetTeam Player { get; set; } 
    public Dictionary<string, string> ColorSetAnotherPlayer = new();
    private string? UserInput;

    public bool PlayGame;
    public bool LockBlack;
    public bool LockWhite;

    public void SetWhite()
    {
        Player = SetTeam.White;
    }

    public void SetBlack()
    {
        Player = SetTeam.Black;
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshTables();
        if (ColorSetAnotherPlayer.ContainsKey(TableId))
        {
            var antorerPlayColorSet = ColorSetAnotherPlayer.First(n => n.Key == TableId).Value;
            if (antorerPlayColorSet == "Black")
            {
                LockBlack = true;
            }
            if (antorerPlayColorSet == "White")
            {
                LockWhite = true;
            }
        }
    }

    private async Task RefreshTables()
    {
        HttpClient client = new HttpClient();
        ColorSetAnotherPlayer = await client.GetFromJsonAsync<Dictionary<string, string>>
                 (UrlManager.ToAbsoluteUri("/Api/GetColor"));
    }

    private async void StartGame()
    {
        SetPlayer();
        UrlManager.NavigateTo($"/CheckBoard/{TableId}/{UserInput}/{Player}");
    }

    public  void SetPlayer()
    {
        if (UserInput is null)
        {
            Random random = new Random();
            var biba = random.Next(1, 1000);
            UserInput = $"Guest:{biba}";
        }
    }
}



